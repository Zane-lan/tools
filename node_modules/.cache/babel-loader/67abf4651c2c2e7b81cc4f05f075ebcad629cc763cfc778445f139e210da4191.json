{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, normalizeClass as _normalizeClass, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"json-formatter\"\n};\nconst _hoisted_2 = {\n  class: \"container\"\n};\nconst _hoisted_3 = {\n  class: \"input-area\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"error-message\"\n};\nconst _hoisted_5 = {\n  class: \"output-area\"\n};\nconst _hoisted_6 = {\n  key: 0,\n  class: \"json-output\"\n};\nconst _hoisted_7 = {\n  key: 1,\n  class: \"placeholder\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_json_pretty = _resolveComponent(\"json-pretty\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" 左侧输入区域 \"), _createElementVNode(\"div\", _hoisted_3, [_cache[2] || (_cache[2] = _createElementVNode(\"h2\", null, \"JSON 输入\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.jsonInput = $event),\n    placeholder: \"请输入 JSON 字符串\",\n    class: _normalizeClass([\"json-input\", {\n      error: $setup.errorMessage\n    }])\n  }, null, 2 /* CLASS */), [[_vModelText, $setup.jsonInput]]), $setup.errorMessage ? (_openBlock(), _createElementBlock(\"p\", _hoisted_4, _toDisplayString($setup.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $setup.formatJson && $setup.formatJson(...args))\n  }, \"格式化\")]), _createCommentVNode(\" 右侧展示区域 \"), _createElementVNode(\"div\", _hoisted_5, [_cache[3] || (_cache[3] = _createElementVNode(\"h2\", null, \"格式化结果\", -1 /* HOISTED */)), $setup.formattedJson ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createVNode(_component_json_pretty, {\n    data: $setup.parsedJson\n  }, null, 8 /* PROPS */, [\"data\"])])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_7, \"格式化后的 JSON 将在此显示\"))])])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","_cache","$event","$setup","jsonInput","placeholder","_normalizeClass","error","errorMessage","_hoisted_4","_toDisplayString","onClick","args","formatJson","_hoisted_5","formattedJson","_hoisted_6","_createVNode","_component_json_pretty","data","parsedJson","_hoisted_7"],"sources":["/Volumes/data/project/my_web/tools/src/views/ParseJson.vue"],"sourcesContent":["<template>\n    <div class=\"json-formatter\">\n        <div class=\"container\">\n            <!-- 左侧输入区域 -->\n            <div class=\"input-area\">\n                <h2>JSON 输入</h2>\n                <textarea\n                        v-model=\"jsonInput\"\n                        placeholder=\"请输入 JSON 字符串\"\n                        class=\"json-input\"\n                        :class=\"{ error: errorMessage }\"\n                ></textarea>\n                <p v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</p>\n                <button @click=\"formatJson\">格式化</button>\n            </div>\n\n            <!-- 右侧展示区域 -->\n            <div class=\"output-area\">\n                <h2>格式化结果</h2>\n                <div v-if=\"formattedJson\" class=\"json-output\">\n                    <json-pretty :data=\"parsedJson\"></json-pretty>\n                </div>\n                <p v-else class=\"placeholder\">格式化后的 JSON 将在此显示</p>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport {ref} from \"vue\";\nimport JsonPretty from \"vue-json-pretty\";\nimport \"vue-json-pretty/lib/styles.css\"; // 引入样式\n\nexport default {\n    name: \"ParseJson\",\n    components: {\n        JsonPretty,\n    },\n    setup() {\n        const jsonInput = ref(\"\"); // 用户输入的 JSON 字符串\n        const formattedJson = ref(\"\"); // 格式化后的 JSON 字符串\n        const parsedJson = ref(null); // 解析后的 JSON 对象\n        const errorMessage = ref(\"\"); // 错误信息\n\n        // 格式化 JSON\n        const formatJson = () => {\n            try {\n                parsedJson.value = JSON.parse(jsonInput.value);\n                formattedJson.value = JSON.stringify(parsedJson.value, null, 2);\n                errorMessage.value = \"\";\n                jsonInput.value = formattedJson.value; // 更新输入框内容\n            } catch (error) {\n                errorMessage.value = `JSON 格式错误：${error.message}`;\n                formattedJson.value = \"\";\n                parsedJson.value = null;\n            }\n        };\n\n        return {\n            jsonInput,\n            formattedJson,\n            parsedJson,\n            errorMessage,\n            formatJson,\n        };\n    },\n};\n</script>\n\n<style scoped>\n/* 页面整体居中 */\n.json-formatter {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    background-color: #f4f4f4;\n}\n\n/* 外层容器 */\n.container {\n    display: flex;\n    width: 80%;\n    max-width: 1200px;\n    background: white;\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    overflow: hidden;\n}\n\n/* 左侧输入区 & 右侧输出区 */\n.input-area,\n.output-area {\n    flex: 1;\n    padding: 20px;\n    box-sizing: border-box;\n    display: flex;\n    flex-direction: column;\n}\n\n.input-area {\n    border-right: 2px solid #ddd;\n    background: #f9f9f9;\n}\n\n.output-area {\n    background: #fff;\n}\n\n/* 标题 */\nh2 {\n    margin-bottom: 15px;\n    font-size: 18px;\n    font-weight: bold;\n    color: #333;\n}\n\n/* 输入框 */\n.json-input {\n    width: 100%;\n    height: 250px;\n    padding: 10px;\n    font-size: 14px;\n    font-family: monospace;\n    border: 1px solid #ccc;\n    border-radius: 6px;\n    resize: none;\n    background: #fff;\n}\n\n.json-input.error {\n    border-color: red;\n}\n\n/* 错误信息 */\n.error-message {\n    color: red;\n    font-size: 14px;\n    margin-top: 5px;\n}\n\n/* 格式化按钮 */\nbutton {\n    padding: 10px 20px;\n    font-size: 16px;\n    background-color: #42b983;\n    color: white;\n    border: none;\n    border-radius: 6px;\n    cursor: pointer;\n    margin-top: 15px;\n    transition: background 0.3s;\n}\n\nbutton:hover {\n    background-color: #369f6e;\n}\n\n/* JSON 预览区域 */\n.json-output {\n    background-color: #f9f9f9;\n    padding: 15px;\n    border-radius: 6px;\n    font-size: 14px;\n    font-family: monospace;\n    height: 250px;\n    overflow: auto;\n    border: 1px solid #ddd;\n}\n\n/* 预览区域占位符 */\n.placeholder {\n    color: #999;\n    font-size: 14px;\n    text-align: center;\n    margin-top: 50px;\n}\n</style>\n"],"mappings":";;EACSA,KAAK,EAAC;AAAgB;;EAClBA,KAAK,EAAC;AAAW;;EAEbA,KAAK,EAAC;AAAY;;EAJnCC,GAAA;EAYuCD,KAAK,EAAC;;;EAK5BA,KAAK,EAAC;AAAa;;EAjBpCC,GAAA;EAmB0CD,KAAK,EAAC;;;EAnBhDC,GAAA;EAsB0BD,KAAK,EAAC;;;;uBArB5BE,mBAAA,CAwBM,OAxBNC,UAwBM,GAvBFC,mBAAA,CAsBM,OAtBNC,UAsBM,GArBFC,mBAAA,YAAe,EACfF,mBAAA,CAUM,OAVNG,UAUM,G,0BATFH,mBAAA,CAAgB,YAAZ,SAAO,sB,gBACXA,mBAAA,CAKY;IAX5B,uBAAAI,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAOiCC,MAAA,CAAAC,SAAS,GAAAF,MAAA;IAClBG,WAAW,EAAC,cAAc;IAC1BZ,KAAK,EAT7Ba,eAAA,EAS8B,YAAY;MAAAC,KAAA,EACDJ,MAAA,CAAAK;IAAY;0CAHpBL,MAAA,CAAAC,SAAS,E,GAKjBD,MAAA,CAAAK,YAAY,I,cAArBb,mBAAA,CAAmE,KAAnEc,UAAmE,EAAAC,gBAAA,CAAnBP,MAAA,CAAAK,YAAY,oBAZ5ET,mBAAA,gBAagBF,mBAAA,CAAwC;IAA/Bc,OAAK,EAAAV,MAAA,QAAAA,MAAA,UAAAW,IAAA,KAAET,MAAA,CAAAU,UAAA,IAAAV,MAAA,CAAAU,UAAA,IAAAD,IAAA,CAAU;KAAE,KAAG,E,GAGnCb,mBAAA,YAAe,EACfF,mBAAA,CAMM,OANNiB,UAMM,G,0BALFjB,mBAAA,CAAc,YAAV,OAAK,sBACEM,MAAA,CAAAY,aAAa,I,cAAxBpB,mBAAA,CAEM,OAFNqB,UAEM,GADFC,YAAA,CAA8CC,sBAAA;IAAhCC,IAAI,EAAEhB,MAAA,CAAAiB;EAAU,kC,oBAElCzB,mBAAA,CAAkD,KAAlD0B,UAAkD,EAApB,kBAAgB,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}