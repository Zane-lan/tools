{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"unix-timestamp\"\n};\nconst _hoisted_2 = {\n  class: \"section\"\n};\nconst _hoisted_3 = {\n  class: \"timestamp\"\n};\nconst _hoisted_4 = {\n  class: \"section\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"result\"\n};\nconst _hoisted_6 = {\n  class: \"section\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"result\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 实时时间戳 \"), _createElementVNode(\"div\", _hoisted_2, [_cache[7] || (_cache[7] = _createElementVNode(\"p\", null, \"当前 Unix 时间戳（毫秒）：\", -1 /* HOISTED */)), _createElementVNode(\"p\", _hoisted_3, _toDisplayString($setup.timestamp), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $setup.copyTimestamp($setup.timestamp))\n  }, \"复制时间戳\")]), _createCommentVNode(\" 时间转时间戳 \"), _createElementVNode(\"div\", _hoisted_4, [_cache[8] || (_cache[8] = _createElementVNode(\"p\", null, \"时间转时间戳：\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.timeInput = $event),\n    placeholder: \"输入时间（YYYY-MM-DD HH:mm:ss）\",\n    class: \"input\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.timeInput]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $setup.convertTimeToTimestamp && $setup.convertTimeToTimestamp(...args))\n  }, \"转换\"), $setup.convertedTimestamp ? (_openBlock(), _createElementBlock(\"p\", _hoisted_5, [_createTextVNode(\" 时间戳：\" + _toDisplayString($setup.convertedTimestamp) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = $event => $setup.copyTimestamp($setup.convertedTimestamp))\n  }, \"复制\")])) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" 时间戳转时间 \"), _createElementVNode(\"div\", _hoisted_6, [_cache[9] || (_cache[9] = _createElementVNode(\"p\", null, \"时间戳转时间：\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.timestampInput = $event),\n    placeholder: \"输入时间戳（毫秒）\",\n    class: \"input\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.timestampInput]]), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $setup.convertTimestampToTime && $setup.convertTimestampToTime(...args))\n  }, \"转换\"), $setup.convertedTime ? (_openBlock(), _createElementBlock(\"p\", _hoisted_7, [_createTextVNode(\" 时间：\" + _toDisplayString($setup.convertedTime) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = $event => $setup.copyTimestamp($setup.convertedTime))\n  }, \"复制\")])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_hoisted_3","_toDisplayString","$setup","timestamp","onClick","_cache","$event","copyTimestamp","_hoisted_4","timeInput","placeholder","args","convertTimeToTimestamp","convertedTimestamp","_hoisted_5","_createTextVNode","_hoisted_6","timestampInput","convertTimestampToTime","convertedTime","_hoisted_7"],"sources":["/Volumes/data/project/my_web/tools/src/views/TimeTools.vue"],"sourcesContent":["<template>\n    <div class=\"unix-timestamp\">\n        <!-- 实时时间戳 -->\n        <div class=\"section\">\n            <p>当前 Unix 时间戳（毫秒）：</p>\n            <p class=\"timestamp\">{{ timestamp }}</p>\n            <button @click=\"copyTimestamp(timestamp)\">复制时间戳</button>\n        </div>\n\n        <!-- 时间转时间戳 -->\n        <div class=\"section\">\n            <p>时间转时间戳：</p>\n            <input\n                    v-model=\"timeInput\"\n                    placeholder=\"输入时间（YYYY-MM-DD HH:mm:ss）\"\n                    class=\"input\"\n            />\n            <button @click=\"convertTimeToTimestamp\">转换</button>\n            <p v-if=\"convertedTimestamp\" class=\"result\">\n                时间戳：{{ convertedTimestamp }}\n                <button @click=\"copyTimestamp(convertedTimestamp)\">复制</button>\n            </p>\n        </div>\n\n        <!-- 时间戳转时间 -->\n        <div class=\"section\">\n            <p>时间戳转时间：</p>\n            <input\n                    v-model=\"timestampInput\"\n                    placeholder=\"输入时间戳（毫秒）\"\n                    class=\"input\"\n            />\n            <button @click=\"convertTimestampToTime\">转换</button>\n            <p v-if=\"convertedTime\" class=\"result\">\n                时间：{{ convertedTime }}\n                <button @click=\"copyTimestamp(convertedTime)\">复制</button>\n            </p>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted, onUnmounted } from 'vue';\n\nexport default {\n    name: 'TimeTools',\n    setup() {\n        const timestamp = ref(Date.now()); // 实时时间戳\n        const timeInput = ref(''); // 时间输入框\n        const timestampInput = ref(''); // 时间戳输入框\n        const convertedTimestamp = ref(null); // 转换后的时间戳\n        const convertedTime = ref(null); // 转换后的时间\n        let intervalId = null; // 定时器 ID\n\n        // 更新时间戳\n        const updateTimestamp = () => {\n            timestamp.value = Date.now();\n        };\n\n        // 启动定时器\n        onMounted(() => {\n            intervalId = setInterval(updateTimestamp, 100); // 每 100 毫秒更新一次\n        });\n\n        // 清除定时器\n        onUnmounted(() => {\n            if (intervalId) {\n                clearInterval(intervalId);\n            }\n        });\n\n        // 复制内容到剪贴板\n        const copyTimestamp = (text) => {\n            navigator.clipboard\n                    .writeText(text.toString())\n                    .then(() => {\n                        alert('已复制到剪贴板！');\n                    })\n                    .catch((err) => {\n                        console.error('复制失败：', err);\n                    });\n        };\n\n        // 时间转时间戳\n        const convertTimeToTimestamp = () => {\n            const date = new Date(timeInput.value);\n            if (isNaN(date.getTime())) {\n                alert('请输入正确的时间格式（YYYY-MM-DD HH:mm:ss）');\n                return;\n            }\n            convertedTimestamp.value = date.getTime();\n        };\n\n        // 时间戳转时间\n        const convertTimestampToTime = () => {\n            const timestampValue = parseInt(timestampInput.value, 10);\n            if (isNaN(timestampValue)) {\n                alert('请输入正确的时间戳（毫秒）');\n                return;\n            }\n            const date = new Date(timestampValue);\n            convertedTime.value = formatDate(date);\n        };\n\n        // 格式化时间为 YYYY-MM-DD HH:mm:ss\n        const formatDate = (date) => {\n            const year = date.getFullYear();\n            const month = String(date.getMonth() + 1).padStart(2, '0');\n            const day = String(date.getDate()).padStart(2, '0');\n            const hours = String(date.getHours()).padStart(2, '0');\n            const minutes = String(date.getMinutes()).padStart(2, '0');\n            const seconds = String(date.getSeconds()).padStart(2, '0');\n            return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n        };\n\n        return {\n            timestamp,\n            timeInput,\n            timestampInput,\n            convertedTimestamp,\n            convertedTime,\n            copyTimestamp,\n            convertTimeToTimestamp,\n            convertTimestampToTime,\n        };\n    },\n};\n</script>\n\n<style scoped>\n.unix-timestamp {\n    font-family: Arial, sans-serif;\n    text-align: center;\n    margin: 20px;\n}\n\n.section {\n    margin-bottom: 30px;\n}\n\n.timestamp {\n    font-size: 24px;\n    font-weight: bold;\n    color: #42b983;\n    margin: 10px 0;\n}\n\n.input {\n    padding: 8px;\n    font-size: 16px;\n    margin-right: 10px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n}\n\nbutton {\n    padding: 8px 16px;\n    font-size: 16px;\n    background-color: #42b983;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\nbutton:hover {\n    background-color: #369f6e;\n}\n\n.result {\n    font-size: 18px;\n    color: #333;\n    margin-top: 10px;\n}\n\n.result button {\n    margin-left: 10px;\n    padding: 4px 8px;\n    font-size: 14px;\n}\n</style>\n"],"mappings":";;EACSA,KAAK,EAAC;AAAgB;;EAElBA,KAAK,EAAC;AAAS;;EAEbA,KAAK,EAAC;AAAW;;EAKnBA,KAAK,EAAC;AAAS;;EAV5BC,GAAA;EAkByCD,KAAK,EAAC;;;EAOlCA,KAAK,EAAC;AAAS;;EAzB5BC,GAAA;EAiCoCD,KAAK,EAAC;;;uBAhCtCE,mBAAA,CAqCM,OArCNC,UAqCM,GApCFC,mBAAA,WAAc,EACdC,mBAAA,CAIM,OAJNC,UAIM,G,0BAHFD,mBAAA,CAAuB,WAApB,kBAAgB,sBACnBA,mBAAA,CAAwC,KAAxCE,UAAwC,EAAAC,gBAAA,CAAhBC,MAAA,CAAAC,SAAS,kBACjCL,mBAAA,CAAwD;IAA/CM,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEJ,MAAA,CAAAK,aAAa,CAACL,MAAA,CAAAC,SAAS;KAAG,OAAK,E,GAGnDN,mBAAA,YAAe,EACfC,mBAAA,CAYM,OAZNU,UAYM,G,0BAXFV,mBAAA,CAAc,WAAX,SAAO,sB,gBACVA,mBAAA,CAIE;IAhBd,uBAAAO,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAa6BJ,MAAA,CAAAO,SAAS,GAAAH,MAAA;IAClBI,WAAW,EAAC,2BAA2B;IACvCjB,KAAK,EAAC;iDAFGS,MAAA,CAAAO,SAAS,E,GAI1BX,mBAAA,CAAmD;IAA1CM,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAET,MAAA,CAAAU,sBAAA,IAAAV,MAAA,CAAAU,sBAAA,IAAAD,IAAA,CAAsB;KAAE,IAAE,GACjCT,MAAA,CAAAW,kBAAkB,I,cAA3BlB,mBAAA,CAGI,KAHJmB,UAGI,GArBhBC,gBAAA,CAkBwD,OACpC,GAAAd,gBAAA,CAAGC,MAAA,CAAAW,kBAAkB,IAAG,GAC5B,iBAAAf,mBAAA,CAA8D;IAArDM,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEJ,MAAA,CAAAK,aAAa,CAACL,MAAA,CAAAW,kBAAkB;KAAG,IAAE,E,KApBrEhB,mBAAA,e,GAwBQA,mBAAA,YAAe,EACfC,mBAAA,CAYM,OAZNkB,UAYM,G,0BAXFlB,mBAAA,CAAc,WAAX,SAAO,sB,gBACVA,mBAAA,CAIE;IA/Bd,uBAAAO,MAAA,QAAAA,MAAA,MAAAC,MAAA,IA4B6BJ,MAAA,CAAAe,cAAc,GAAAX,MAAA;IACvBI,WAAW,EAAC,WAAW;IACvBjB,KAAK,EAAC;iDAFGS,MAAA,CAAAe,cAAc,E,GAI/BnB,mBAAA,CAAmD;IAA1CM,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAET,MAAA,CAAAgB,sBAAA,IAAAhB,MAAA,CAAAgB,sBAAA,IAAAP,IAAA,CAAsB;KAAE,IAAE,GACjCT,MAAA,CAAAiB,aAAa,I,cAAtBxB,mBAAA,CAGI,KAHJyB,UAGI,GApChBL,gBAAA,CAiCmD,MAChC,GAAAd,gBAAA,CAAGC,MAAA,CAAAiB,aAAa,IAAG,GACtB,iBAAArB,mBAAA,CAAyD;IAAhDM,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEJ,MAAA,CAAAK,aAAa,CAACL,MAAA,CAAAiB,aAAa;KAAG,IAAE,E,KAnChEtB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}