{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nexport default {\n  name: 'TreeMenu',\n  props: {\n    menuData: {\n      type: Array,\n      required: true\n    },\n    searchQuery: {\n      type: String,\n      default: ''\n    },\n    isRoot: {\n      type: Boolean,\n      default: true\n    }\n  },\n  computed: {\n    // 过滤菜单项\n    filteredMenu() {\n      const query = this.searchQuery.toLowerCase();\n      if (!query) return this.menuData;\n      const filterItems = items => {\n        return items.map(item => {\n          // 复制对象以避免修改原始数据\n          const newItem = {\n            ...item\n          };\n          if (newItem.children) {\n            newItem.children = filterItems(newItem.children);\n            // 如果子菜单有匹配项，展开父菜单\n            if (newItem.children.length > 0) {\n              newItem.isOpen = true;\n            }\n          }\n          return newItem;\n        }).filter(item => {\n          // 保留匹配项或其子项匹配的菜单项\n          return item.name.toLowerCase().includes(query) || item.children && item.children.length > 0;\n        });\n      };\n      return filterItems(this.menuData);\n    }\n  },\n  methods: {\n    // 处理菜单项点击\n    handleItemClick(item) {\n      if (item.children) {\n        item.isOpen = !item.isOpen;\n      } else {\n        this.$emit('item-selected', item); // 通知父组件选中了菜单项\n        this.$router.push(item.path); // 跳转到对应页面\n      }\n    },\n    // 高亮匹配的关键字\n    highlightMatch(text) {\n      const query = this.searchQuery.toLowerCase();\n      if (!query) return text;\n      const regex = new RegExp(`(${query})`, 'gi');\n      return text.replace(regex, '<span class=\"highlight\">$1</span>');\n    },\n    // 输入事件处理\n    onInput(event) {\n      this.$emit('update:searchQuery', event.target.value);\n    },\n    // 处理子菜单项选中\n    handleItemSelected(item) {\n      this.$emit('item-selected', item); // 向上传递选中事件\n    }\n  }\n};","map":{"version":3,"names":["name","props","menuData","type","Array","required","searchQuery","String","default","isRoot","Boolean","computed","filteredMenu","query","toLowerCase","filterItems","items","map","item","newItem","children","length","isOpen","filter","includes","methods","handleItemClick","$emit","$router","push","path","highlightMatch","text","regex","RegExp","replace","onInput","event","target","value","handleItemSelected"],"sources":["/Volumes/data/project/my_web/tools/src/components/TreeMenu.vue"],"sourcesContent":["<template>\n    <div class=\"tree-menu-container\">\n        <!-- 只在顶层显示搜索框 -->\n        <input\n                v-if=\"isRoot\"\n                :value=\"searchQuery\"\n                @input=\"onInput\"\n                placeholder=\"Search...\"\n                class=\"search-input\"\n        />\n        <!-- 树形菜单 -->\n        <ul class=\"tree-menu\">\n            <li v-for=\"item in filteredMenu\" :key=\"item.name\">\n                <div @click=\"handleItemClick(item)\" class=\"menu-item\">\n                    <!-- 高亮匹配项 -->\n                    <span v-html=\"highlightMatch(item.name)\"></span>\n                    <span v-if=\"item.children\" class=\"arrow\">\n            {{ item.isOpen ? '▼' : '▶' }}\n          </span>\n                </div>\n                <!-- 递归渲染子菜单 -->\n                <TreeMenu\n                        v-if=\"item.children && item.isOpen\"\n                        :menu-data=\"item.children\"\n                        :search-query=\"searchQuery\"\n                        :is-root=\"false\"\n                        @update:searchQuery=\"(value) => $emit('update:searchQuery', value)\"\n                        @item-selected=\"handleItemSelected\"\n                />\n            </li>\n        </ul>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'TreeMenu',\n    props: {\n        menuData: {\n            type: Array,\n            required: true,\n        },\n        searchQuery: {\n            type: String,\n            default: '',\n        },\n        isRoot: {\n            type: Boolean,\n            default: true,\n        },\n    },\n    computed: {\n        // 过滤菜单项\n        filteredMenu() {\n            const query = this.searchQuery.toLowerCase();\n            if (!query) return this.menuData;\n\n            const filterItems = (items) => {\n                return items\n                        .map((item) => {\n                            // 复制对象以避免修改原始数据\n                            const newItem = { ...item };\n                            if (newItem.children) {\n                                newItem.children = filterItems(newItem.children);\n                                // 如果子菜单有匹配项，展开父菜单\n                                if (newItem.children.length > 0) {\n                                    newItem.isOpen = true;\n                                }\n                            }\n                            return newItem;\n                        })\n                        .filter((item) => {\n                            // 保留匹配项或其子项匹配的菜单项\n                            return (\n                                    item.name.toLowerCase().includes(query) ||\n                                    (item.children && item.children.length > 0)\n                            );\n                        });\n            };\n\n            return filterItems(this.menuData);\n        },\n    },\n    methods: {\n        // 处理菜单项点击\n        handleItemClick(item) {\n            if (item.children) {\n                item.isOpen = !item.isOpen;\n            } else {\n                this.$emit('item-selected', item); // 通知父组件选中了菜单项\n                this.$router.push(item.path); // 跳转到对应页面\n            }\n        },\n        // 高亮匹配的关键字\n        highlightMatch(text) {\n            const query = this.searchQuery.toLowerCase();\n            if (!query) return text;\n\n            const regex = new RegExp(`(${query})`, 'gi');\n            return text.replace(regex, '<span class=\"highlight\">$1</span>');\n        },\n        // 输入事件处理\n        onInput(event) {\n            this.$emit('update:searchQuery', event.target.value);\n        },\n        // 处理子菜单项选中\n        handleItemSelected(item) {\n            this.$emit('item-selected', item); // 向上传递选中事件\n        },\n    },\n};\n</script>\n\n<style>\n.tree-menu-container {\n    width: 100%;\n}\n\n.search-input {\n    width: 100%;\n    padding: 8px;\n    margin-bottom: 10px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    font-size: 14px;\n}\n\n.tree-menu {\n    list-style-type: none;\n    padding-left: 20px;\n}\n\n.menu-item {\n    padding: 8px;\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.menu-item:hover {\n    background-color: #f0f0f0;\n}\n\n.arrow {\n    font-size: 12px;\n}\n\n.highlight {\n    background-color: yellow;\n    font-weight: bold;\n}\n</style>\n"],"mappings":";;;;AAmCA,eAAe;EACXA,IAAI,EAAE,UAAU;EAChBC,KAAK,EAAE;IACHC,QAAQ,EAAE;MACNC,IAAI,EAAEC,KAAK;MACXC,QAAQ,EAAE;IACd,CAAC;IACDC,WAAW,EAAE;MACTH,IAAI,EAAEI,MAAM;MACZC,OAAO,EAAE;IACb,CAAC;IACDC,MAAM,EAAE;MACJN,IAAI,EAAEO,OAAO;MACbF,OAAO,EAAE;IACb;EACJ,CAAC;EACDG,QAAQ,EAAE;IACN;IACAC,YAAYA,CAAA,EAAG;MACX,MAAMC,KAAI,GAAI,IAAI,CAACP,WAAW,CAACQ,WAAW,CAAC,CAAC;MAC5C,IAAI,CAACD,KAAK,EAAE,OAAO,IAAI,CAACX,QAAQ;MAEhC,MAAMa,WAAU,GAAKC,KAAK,IAAK;QAC3B,OAAOA,KAAI,CACFC,GAAG,CAAEC,IAAI,IAAK;UACX;UACA,MAAMC,OAAM,GAAI;YAAE,GAAGD;UAAK,CAAC;UAC3B,IAAIC,OAAO,CAACC,QAAQ,EAAE;YAClBD,OAAO,CAACC,QAAO,GAAIL,WAAW,CAACI,OAAO,CAACC,QAAQ,CAAC;YAChD;YACA,IAAID,OAAO,CAACC,QAAQ,CAACC,MAAK,GAAI,CAAC,EAAE;cAC7BF,OAAO,CAACG,MAAK,GAAI,IAAI;YACzB;UACJ;UACA,OAAOH,OAAO;QAClB,CAAC,EACAI,MAAM,CAAEL,IAAI,IAAK;UACd;UACA,OACQA,IAAI,CAAClB,IAAI,CAACc,WAAW,CAAC,CAAC,CAACU,QAAQ,CAACX,KAAK,KACrCK,IAAI,CAACE,QAAO,IAAKF,IAAI,CAACE,QAAQ,CAACC,MAAK,GAAI,CAAC;QAEtD,CAAC,CAAC;MACd,CAAC;MAED,OAAON,WAAW,CAAC,IAAI,CAACb,QAAQ,CAAC;IACrC;EACJ,CAAC;EACDuB,OAAO,EAAE;IACL;IACAC,eAAeA,CAACR,IAAI,EAAE;MAClB,IAAIA,IAAI,CAACE,QAAQ,EAAE;QACfF,IAAI,CAACI,MAAK,GAAI,CAACJ,IAAI,CAACI,MAAM;MAC9B,OAAO;QACH,IAAI,CAACK,KAAK,CAAC,eAAe,EAAET,IAAI,CAAC,EAAE;QACnC,IAAI,CAACU,OAAO,CAACC,IAAI,CAACX,IAAI,CAACY,IAAI,CAAC,EAAE;MAClC;IACJ,CAAC;IACD;IACAC,cAAcA,CAACC,IAAI,EAAE;MACjB,MAAMnB,KAAI,GAAI,IAAI,CAACP,WAAW,CAACQ,WAAW,CAAC,CAAC;MAC5C,IAAI,CAACD,KAAK,EAAE,OAAOmB,IAAI;MAEvB,MAAMC,KAAI,GAAI,IAAIC,MAAM,CAAC,IAAIrB,KAAK,GAAG,EAAE,IAAI,CAAC;MAC5C,OAAOmB,IAAI,CAACG,OAAO,CAACF,KAAK,EAAE,mCAAmC,CAAC;IACnE,CAAC;IACD;IACAG,OAAOA,CAACC,KAAK,EAAE;MACX,IAAI,CAACV,KAAK,CAAC,oBAAoB,EAAEU,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IACxD,CAAC;IACD;IACAC,kBAAkBA,CAACtB,IAAI,EAAE;MACrB,IAAI,CAACS,KAAK,CAAC,eAAe,EAAET,IAAI,CAAC,EAAE;IACvC;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}